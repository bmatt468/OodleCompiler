/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import java.util.*;
import com.bju.cps450.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPClasses().apply(this);
        outStart(node);
    }

    public void inAClasses(AClasses node)
    {
        defaultIn(node);
    }

    public void outAClasses(AClasses node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClasses(AClasses node)
    {
        inAClasses(node);
        {
            List<TNewline> copy = new ArrayList<TNewline>(node.getNewline());
            Collections.reverse(copy);
            for(TNewline e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PClassesTail> copy = new ArrayList<PClassesTail>(node.getClassesTail());
            Collections.reverse(copy);
            for(PClassesTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getClassDefinition() != null)
        {
            node.getClassDefinition().apply(this);
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        outAClasses(node);
    }

    public void inAClassesTail(AClassesTail node)
    {
        defaultIn(node);
    }

    public void outAClassesTail(AClassesTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassesTail(AClassesTail node)
    {
        inAClassesTail(node);
        if(node.getClassDefinition() != null)
        {
            node.getClassDefinition().apply(this);
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        outAClassesTail(node);
    }

    public void inANewlines(ANewlines node)
    {
        defaultIn(node);
    }

    public void outANewlines(ANewlines node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewlines(ANewlines node)
    {
        inANewlines(node);
        {
            List<TNewline> copy = new ArrayList<TNewline>(node.getNewline());
            Collections.reverse(copy);
            for(TNewline e : copy)
            {
                e.apply(this);
            }
        }
        outANewlines(node);
    }

    public void inAClassDefinition(AClassDefinition node)
    {
        defaultIn(node);
    }

    public void outAClassDefinition(AClassDefinition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassDefinition(AClassDefinition node)
    {
        inAClassDefinition(node);
        if(node.getEndId() != null)
        {
            node.getEndId().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        {
            List<PMethodDeclarations> copy = new ArrayList<PMethodDeclarations>(node.getMethodDeclarations());
            Collections.reverse(copy);
            for(PMethodDeclarations e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PVariableDeclarations> copy = new ArrayList<PVariableDeclarations>(node.getVariableDeclarations());
            Collections.reverse(copy);
            for(PVariableDeclarations e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getInheritsClause() != null)
        {
            node.getInheritsClause().apply(this);
        }
        if(node.getBeginId() != null)
        {
            node.getBeginId().apply(this);
        }
        if(node.getClasskey() != null)
        {
            node.getClasskey().apply(this);
        }
        outAClassDefinition(node);
    }

    public void inAInheritsClause(AInheritsClause node)
    {
        defaultIn(node);
    }

    public void outAInheritsClause(AInheritsClause node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInheritsClause(AInheritsClause node)
    {
        inAInheritsClause(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getInherits() != null)
        {
            node.getInherits().apply(this);
        }
        outAInheritsClause(node);
    }

    public void inAVariableDeclarations(AVariableDeclarations node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarations(AVariableDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarations(AVariableDeclarations node)
    {
        inAVariableDeclarations(node);
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getInitializer() != null)
        {
            node.getInitializer().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVariableDeclarations(node);
    }

    public void inATypeDeclaration(ATypeDeclaration node)
    {
        defaultIn(node);
    }

    public void outATypeDeclaration(ATypeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDeclaration(ATypeDeclaration node)
    {
        inATypeDeclaration(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outATypeDeclaration(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAStringType(AStringType node)
    {
        defaultIn(node);
    }

    public void outAStringType(AStringType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringType(AStringType node)
    {
        inAStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringType(node);
    }

    public void inAClassType(AClassType node)
    {
        defaultIn(node);
    }

    public void outAClassType(AClassType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        inAClassType(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAClassType(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAArrayType(node);
    }

    public void inADuckType(ADuckType node)
    {
        defaultIn(node);
    }

    public void outADuckType(ADuckType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADuckType(ADuckType node)
    {
        inADuckType(node);
        if(node.getDuck() != null)
        {
            node.getDuck().apply(this);
        }
        outADuckType(node);
    }

    public void inAFloatType(AFloatType node)
    {
        defaultIn(node);
    }

    public void outAFloatType(AFloatType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatType(AFloatType node)
    {
        inAFloatType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatType(node);
    }

    public void inAInitializer(AInitializer node)
    {
        defaultIn(node);
    }

    public void outAInitializer(AInitializer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInitializer(AInitializer node)
    {
        inAInitializer(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAInitializer(node);
    }

    public void inAMethodDeclarations(AMethodDeclarations node)
    {
        defaultIn(node);
    }

    public void outAMethodDeclarations(AMethodDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDeclarations(AMethodDeclarations node)
    {
        inAMethodDeclarations(node);
        if(node.getEndNewlines() != null)
        {
            node.getEndNewlines().apply(this);
        }
        if(node.getEndId() != null)
        {
            node.getEndId().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getMiddleNewlines() != null)
        {
            node.getMiddleNewlines().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        {
            List<PVariableDeclarations> copy = new ArrayList<PVariableDeclarations>(node.getVariableDeclarations());
            Collections.reverse(copy);
            for(PVariableDeclarations e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBeginNewlines() != null)
        {
            node.getBeginNewlines().apply(this);
        }
        if(node.getIs() != null)
        {
            node.getIs().apply(this);
        }
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getArgumentList() != null)
        {
            node.getArgumentList().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getBeginId() != null)
        {
            node.getBeginId().apply(this);
        }
        outAMethodDeclarations(node);
    }

    public void inAArgumentList(AArgumentList node)
    {
        defaultIn(node);
    }

    public void outAArgumentList(AArgumentList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentList(AArgumentList node)
    {
        inAArgumentList(node);
        {
            List<PArgumentListTail> copy = new ArrayList<PArgumentListTail>(node.getArgumentListTail());
            Collections.reverse(copy);
            for(PArgumentListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        outAArgumentList(node);
    }

    public void inAArgumentListTail(AArgumentListTail node)
    {
        defaultIn(node);
    }

    public void outAArgumentListTail(AArgumentListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgumentListTail(AArgumentListTail node)
    {
        inAArgumentListTail(node);
        if(node.getArgument() != null)
        {
            node.getArgument().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAArgumentListTail(node);
    }

    public void inAArgument(AArgument node)
    {
        defaultIn(node);
    }

    public void outAArgument(AArgument node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArgument(AArgument node)
    {
        inAArgument(node);
        if(node.getTypeDeclaration() != null)
        {
            node.getTypeDeclaration().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArgument(node);
    }

    public void inAStatementList(AStatementList node)
    {
        defaultIn(node);
    }

    public void outAStatementList(AStatementList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementList(AStatementList node)
    {
        inAStatementList(node);
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        {
            List<PStatementListTail> copy = new ArrayList<PStatementListTail>(node.getStatementListTail());
            Collections.reverse(copy);
            for(PStatementListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAStatementList(node);
    }

    public void inAStatementListTail(AStatementListTail node)
    {
        defaultIn(node);
    }

    public void outAStatementListTail(AStatementListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementListTail(AStatementListTail node)
    {
        inAStatementListTail(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        outAStatementListTail(node);
    }

    public void inAIfStatementStatement(AIfStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatementStatement(AIfStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementStatement(AIfStatementStatement node)
    {
        inAIfStatementStatement(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outAIfStatementStatement(node);
    }

    public void inALoopStatementStatement(ALoopStatementStatement node)
    {
        defaultIn(node);
    }

    public void outALoopStatementStatement(ALoopStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopStatementStatement(ALoopStatementStatement node)
    {
        inALoopStatementStatement(node);
        if(node.getLoopStatement() != null)
        {
            node.getLoopStatement().apply(this);
        }
        outALoopStatementStatement(node);
    }

    public void inACallStatementStatement(ACallStatementStatement node)
    {
        defaultIn(node);
    }

    public void outACallStatementStatement(ACallStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStatementStatement(ACallStatementStatement node)
    {
        inACallStatementStatement(node);
        if(node.getCallStatement() != null)
        {
            node.getCallStatement().apply(this);
        }
        outACallStatementStatement(node);
    }

    public void inAAssignStatementStatement(AAssignStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatementStatement(AAssignStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatementStatement(AAssignStatementStatement node)
    {
        inAAssignStatementStatement(node);
        if(node.getAssignmentStatement() != null)
        {
            node.getAssignmentStatement().apply(this);
        }
        outAAssignStatementStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getEndIf() != null)
        {
            node.getEndIf().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getElseStatement() != null)
        {
            node.getElseStatement().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getBeginIf() != null)
        {
            node.getBeginIf().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseStatement(node);
    }

    public void inALoopStatement(ALoopStatement node)
    {
        defaultIn(node);
    }

    public void outALoopStatement(ALoopStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopStatement(ALoopStatement node)
    {
        inALoopStatement(node);
        if(node.getEndLoop() != null)
        {
            node.getEndLoop().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getStatementList() != null)
        {
            node.getStatementList().apply(this);
        }
        if(node.getNewlines() != null)
        {
            node.getNewlines().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getBeginLoop() != null)
        {
            node.getBeginLoop().apply(this);
        }
        outALoopStatement(node);
    }

    public void inACallStatement(ACallStatement node)
    {
        defaultIn(node);
    }

    public void outACallStatement(ACallStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallStatement(ACallStatement node)
    {
        inACallStatement(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpressionDot() != null)
        {
            node.getExpressionDot().apply(this);
        }
        outACallStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        {
            List<PArray> copy = new ArrayList<PArray>(node.getArray());
            Collections.reverse(copy);
            for(PArray e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inAExpressionList(AExpressionList node)
    {
        defaultIn(node);
    }

    public void outAExpressionList(AExpressionList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionList(AExpressionList node)
    {
        inAExpressionList(node);
        {
            List<PExpressionListTail> copy = new ArrayList<PExpressionListTail>(node.getExpressionListTail());
            Collections.reverse(copy);
            for(PExpressionListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        outAExpressionList(node);
    }

    public void inAExpressionListTail(AExpressionListTail node)
    {
        defaultIn(node);
    }

    public void outAExpressionListTail(AExpressionListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionListTail(AExpressionListTail node)
    {
        inAExpressionListTail(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExpressionListTail(node);
    }

    public void inAExpression(AExpression node)
    {
        defaultIn(node);
    }

    public void outAExpression(AExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpression(AExpression node)
    {
        inAExpression(node);
        if(node.getExpressionLvl8() != null)
        {
            node.getExpressionLvl8().apply(this);
        }
        outAExpression(node);
    }

    public void inAOrExpressionLvl8(AOrExpressionLvl8 node)
    {
        defaultIn(node);
    }

    public void outAOrExpressionLvl8(AOrExpressionLvl8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpressionLvl8(AOrExpressionLvl8 node)
    {
        inAOrExpressionLvl8(node);
        if(node.getExpressionLvl7() != null)
        {
            node.getExpressionLvl7().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpressionLvl8() != null)
        {
            node.getExpressionLvl8().apply(this);
        }
        outAOrExpressionLvl8(node);
    }

    public void inAOtherExpressionLvl8(AOtherExpressionLvl8 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpressionLvl8(AOtherExpressionLvl8 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpressionLvl8(AOtherExpressionLvl8 node)
    {
        inAOtherExpressionLvl8(node);
        if(node.getExpressionLvl7() != null)
        {
            node.getExpressionLvl7().apply(this);
        }
        outAOtherExpressionLvl8(node);
    }

    public void inAAndExpressionLvl7(AAndExpressionLvl7 node)
    {
        defaultIn(node);
    }

    public void outAAndExpressionLvl7(AAndExpressionLvl7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpressionLvl7(AAndExpressionLvl7 node)
    {
        inAAndExpressionLvl7(node);
        if(node.getExpressionLvl6() != null)
        {
            node.getExpressionLvl6().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExpressionLvl7() != null)
        {
            node.getExpressionLvl7().apply(this);
        }
        outAAndExpressionLvl7(node);
    }

    public void inAOtherExpressionLvl7(AOtherExpressionLvl7 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpressionLvl7(AOtherExpressionLvl7 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpressionLvl7(AOtherExpressionLvl7 node)
    {
        inAOtherExpressionLvl7(node);
        if(node.getExpressionLvl6() != null)
        {
            node.getExpressionLvl6().apply(this);
        }
        outAOtherExpressionLvl7(node);
    }

    public void inAEqualsExpressionLvl6(AEqualsExpressionLvl6 node)
    {
        defaultIn(node);
    }

    public void outAEqualsExpressionLvl6(AEqualsExpressionLvl6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsExpressionLvl6(AEqualsExpressionLvl6 node)
    {
        inAEqualsExpressionLvl6(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAEqualsExpressionLvl6(node);
    }

    public void inAGreaterExpressionLvl6(AGreaterExpressionLvl6 node)
    {
        defaultIn(node);
    }

    public void outAGreaterExpressionLvl6(AGreaterExpressionLvl6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterExpressionLvl6(AGreaterExpressionLvl6 node)
    {
        inAGreaterExpressionLvl6(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAGreaterExpressionLvl6(node);
    }

    public void inAGtEqualExpressionLvl6(AGtEqualExpressionLvl6 node)
    {
        defaultIn(node);
    }

    public void outAGtEqualExpressionLvl6(AGtEqualExpressionLvl6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtEqualExpressionLvl6(AGtEqualExpressionLvl6 node)
    {
        inAGtEqualExpressionLvl6(node);
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        outAGtEqualExpressionLvl6(node);
    }

    public void inAOtherExpressionLvl6(AOtherExpressionLvl6 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpressionLvl6(AOtherExpressionLvl6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpressionLvl6(AOtherExpressionLvl6 node)
    {
        inAOtherExpressionLvl6(node);
        if(node.getExpressionLvl5() != null)
        {
            node.getExpressionLvl5().apply(this);
        }
        outAOtherExpressionLvl6(node);
    }

    public void inAConcatExpressionLvl5(AConcatExpressionLvl5 node)
    {
        defaultIn(node);
    }

    public void outAConcatExpressionLvl5(AConcatExpressionLvl5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatExpressionLvl5(AConcatExpressionLvl5 node)
    {
        inAConcatExpressionLvl5(node);
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        if(node.getConcatenate() != null)
        {
            node.getConcatenate().apply(this);
        }
        if(node.getExpressionLvl5() != null)
        {
            node.getExpressionLvl5().apply(this);
        }
        outAConcatExpressionLvl5(node);
    }

    public void inAOtherExpressionLvl5(AOtherExpressionLvl5 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpressionLvl5(AOtherExpressionLvl5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpressionLvl5(AOtherExpressionLvl5 node)
    {
        inAOtherExpressionLvl5(node);
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        outAOtherExpressionLvl5(node);
    }

    public void inAAddExpressionLvl4(AAddExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAAddExpressionLvl4(AAddExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpressionLvl4(AAddExpressionLvl4 node)
    {
        inAAddExpressionLvl4(node);
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        outAAddExpressionLvl4(node);
    }

    public void inASubtractExpressionLvl4(ASubtractExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outASubtractExpressionLvl4(ASubtractExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtractExpressionLvl4(ASubtractExpressionLvl4 node)
    {
        inASubtractExpressionLvl4(node);
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpressionLvl4() != null)
        {
            node.getExpressionLvl4().apply(this);
        }
        outASubtractExpressionLvl4(node);
    }

    public void inAOtherExpressionLvl4(AOtherExpressionLvl4 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpressionLvl4(AOtherExpressionLvl4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpressionLvl4(AOtherExpressionLvl4 node)
    {
        inAOtherExpressionLvl4(node);
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        outAOtherExpressionLvl4(node);
    }

    public void inAMultExpressionLvl3(AMultExpressionLvl3 node)
    {
        defaultIn(node);
    }

    public void outAMultExpressionLvl3(AMultExpressionLvl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpressionLvl3(AMultExpressionLvl3 node)
    {
        inAMultExpressionLvl3(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        outAMultExpressionLvl3(node);
    }

    public void inADivideExpressionLvl3(ADivideExpressionLvl3 node)
    {
        defaultIn(node);
    }

    public void outADivideExpressionLvl3(ADivideExpressionLvl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivideExpressionLvl3(ADivideExpressionLvl3 node)
    {
        inADivideExpressionLvl3(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getDivide() != null)
        {
            node.getDivide().apply(this);
        }
        if(node.getExpressionLvl3() != null)
        {
            node.getExpressionLvl3().apply(this);
        }
        outADivideExpressionLvl3(node);
    }

    public void inAOtherExpressionLvl3(AOtherExpressionLvl3 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpressionLvl3(AOtherExpressionLvl3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpressionLvl3(AOtherExpressionLvl3 node)
    {
        inAOtherExpressionLvl3(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        outAOtherExpressionLvl3(node);
    }

    public void inAPosExpressionLvl2(APosExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outAPosExpressionLvl2(APosExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPosExpressionLvl2(APosExpressionLvl2 node)
    {
        inAPosExpressionLvl2(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPosExpressionLvl2(node);
    }

    public void inANegExpressionLvl2(ANegExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outANegExpressionLvl2(ANegExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegExpressionLvl2(ANegExpressionLvl2 node)
    {
        inANegExpressionLvl2(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outANegExpressionLvl2(node);
    }

    public void inANotExpressionLvl2(ANotExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outANotExpressionLvl2(ANotExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpressionLvl2(ANotExpressionLvl2 node)
    {
        inANotExpressionLvl2(node);
        if(node.getExpressionLvl2() != null)
        {
            node.getExpressionLvl2().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotExpressionLvl2(node);
    }

    public void inAOtherExpressionLvl2(AOtherExpressionLvl2 node)
    {
        defaultIn(node);
    }

    public void outAOtherExpressionLvl2(AOtherExpressionLvl2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherExpressionLvl2(AOtherExpressionLvl2 node)
    {
        inAOtherExpressionLvl2(node);
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outAOtherExpressionLvl2(node);
    }

    public void inAIdentifierExpressionLvl1(AIdentifierExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpressionLvl1(AIdentifierExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExpressionLvl1(AIdentifierExpressionLvl1 node)
    {
        inAIdentifierExpressionLvl1(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpressionLvl1(node);
    }

    public void inAStringExpressionLvl1(AStringExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAStringExpressionLvl1(AStringExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringExpressionLvl1(AStringExpressionLvl1 node)
    {
        inAStringExpressionLvl1(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringExpressionLvl1(node);
    }

    public void inAIntegerExpressionLvl1(AIntegerExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAIntegerExpressionLvl1(AIntegerExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerExpressionLvl1(AIntegerExpressionLvl1 node)
    {
        inAIntegerExpressionLvl1(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerExpressionLvl1(node);
    }

    public void inATrueExpressionLvl1(ATrueExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outATrueExpressionLvl1(ATrueExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpressionLvl1(ATrueExpressionLvl1 node)
    {
        inATrueExpressionLvl1(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpressionLvl1(node);
    }

    public void inAFalseExpressionLvl1(AFalseExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAFalseExpressionLvl1(AFalseExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpressionLvl1(AFalseExpressionLvl1 node)
    {
        inAFalseExpressionLvl1(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpressionLvl1(node);
    }

    public void inANullExpressionLvl1(ANullExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outANullExpressionLvl1(ANullExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANullExpressionLvl1(ANullExpressionLvl1 node)
    {
        inANullExpressionLvl1(node);
        if(node.getNull() != null)
        {
            node.getNull().apply(this);
        }
        outANullExpressionLvl1(node);
    }

    public void inAMeExpressionLvl1(AMeExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAMeExpressionLvl1(AMeExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeExpressionLvl1(AMeExpressionLvl1 node)
    {
        inAMeExpressionLvl1(node);
        if(node.getMe() != null)
        {
            node.getMe().apply(this);
        }
        outAMeExpressionLvl1(node);
    }

    public void inANewExpressionLvl1(ANewExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outANewExpressionLvl1(ANewExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewExpressionLvl1(ANewExpressionLvl1 node)
    {
        inANewExpressionLvl1(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outANewExpressionLvl1(node);
    }

    public void inACallExpressionLvl1(ACallExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outACallExpressionLvl1(ACallExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallExpressionLvl1(ACallExpressionLvl1 node)
    {
        inACallExpressionLvl1(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getExpressionList() != null)
        {
            node.getExpressionList().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getExpressionDot() != null)
        {
            node.getExpressionDot().apply(this);
        }
        outACallExpressionLvl1(node);
    }

    public void inAArrayExpressionLvl1(AArrayExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAArrayExpressionLvl1(AArrayExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayExpressionLvl1(AArrayExpressionLvl1 node)
    {
        inAArrayExpressionLvl1(node);
        {
            List<PArray> copy = new ArrayList<PArray>(node.getArray());
            Collections.reverse(copy);
            for(PArray e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAArrayExpressionLvl1(node);
    }

    public void inAParenExpressionLvl1(AParenExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAParenExpressionLvl1(AParenExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExpressionLvl1(AParenExpressionLvl1 node)
    {
        inAParenExpressionLvl1(node);
        if(node.getRParen() != null)
        {
            node.getRParen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLParen() != null)
        {
            node.getLParen().apply(this);
        }
        outAParenExpressionLvl1(node);
    }

    public void inAFloatExpressionLvl1(AFloatExpressionLvl1 node)
    {
        defaultIn(node);
    }

    public void outAFloatExpressionLvl1(AFloatExpressionLvl1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatExpressionLvl1(AFloatExpressionLvl1 node)
    {
        inAFloatExpressionLvl1(node);
        if(node.getFloatLiteral() != null)
        {
            node.getFloatLiteral().apply(this);
        }
        outAFloatExpressionLvl1(node);
    }

    public void inAExpressionDot(AExpressionDot node)
    {
        defaultIn(node);
    }

    public void outAExpressionDot(AExpressionDot node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionDot(AExpressionDot node)
    {
        inAExpressionDot(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getExpressionLvl1() != null)
        {
            node.getExpressionLvl1().apply(this);
        }
        outAExpressionDot(node);
    }

    public void inAArray(AArray node)
    {
        defaultIn(node);
    }

    public void outAArray(AArray node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArray(AArray node)
    {
        inAArray(node);
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        outAArray(node);
    }
}
