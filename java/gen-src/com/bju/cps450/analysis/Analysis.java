/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.analysis;

import com.bju.cps450.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAClasses(AClasses node);
    void caseAClassesTail(AClassesTail node);
    void caseANewlines(ANewlines node);
    void caseAClassDefinition(AClassDefinition node);
    void caseAInheritsClause(AInheritsClause node);
    void caseAVariableDeclarations(AVariableDeclarations node);
    void caseATypeDeclaration(ATypeDeclaration node);
    void caseABooleanType(ABooleanType node);
    void caseAIntType(AIntType node);
    void caseAStringType(AStringType node);
    void caseAClassType(AClassType node);
    void caseAArrayType(AArrayType node);
    void caseADuckType(ADuckType node);
    void caseAFloatType(AFloatType node);
    void caseAInitializer(AInitializer node);
    void caseAMethodDeclarations(AMethodDeclarations node);
    void caseAArgumentList(AArgumentList node);
    void caseAArgumentListTail(AArgumentListTail node);
    void caseAArgument(AArgument node);
    void caseAStatementList(AStatementList node);
    void caseAStatementListTail(AStatementListTail node);
    void caseAIfStatementStatement(AIfStatementStatement node);
    void caseALoopStatementStatement(ALoopStatementStatement node);
    void caseACallStatementStatement(ACallStatementStatement node);
    void caseAAssignStatementStatement(AAssignStatementStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAElseStatement(AElseStatement node);
    void caseALoopStatement(ALoopStatement node);
    void caseACallStatement(ACallStatement node);
    void caseAAssignmentStatement(AAssignmentStatement node);
    void caseAExpressionList(AExpressionList node);
    void caseAExpressionListTail(AExpressionListTail node);
    void caseAExpression(AExpression node);
    void caseAOrExpressionLvl8(AOrExpressionLvl8 node);
    void caseAOtherExpressionLvl8(AOtherExpressionLvl8 node);
    void caseAAndExpressionLvl7(AAndExpressionLvl7 node);
    void caseAOtherExpressionLvl7(AOtherExpressionLvl7 node);
    void caseAEqualsExpressionLvl6(AEqualsExpressionLvl6 node);
    void caseAGreaterExpressionLvl6(AGreaterExpressionLvl6 node);
    void caseAGtEqualExpressionLvl6(AGtEqualExpressionLvl6 node);
    void caseAOtherExpressionLvl6(AOtherExpressionLvl6 node);
    void caseAConcatExpressionLvl5(AConcatExpressionLvl5 node);
    void caseAOtherExpressionLvl5(AOtherExpressionLvl5 node);
    void caseAAddExpressionLvl4(AAddExpressionLvl4 node);
    void caseASubtractExpressionLvl4(ASubtractExpressionLvl4 node);
    void caseAOtherExpressionLvl4(AOtherExpressionLvl4 node);
    void caseAMultExpressionLvl3(AMultExpressionLvl3 node);
    void caseADivideExpressionLvl3(ADivideExpressionLvl3 node);
    void caseAOtherExpressionLvl3(AOtherExpressionLvl3 node);
    void caseAPosExpressionLvl2(APosExpressionLvl2 node);
    void caseANegExpressionLvl2(ANegExpressionLvl2 node);
    void caseANotExpressionLvl2(ANotExpressionLvl2 node);
    void caseAOtherExpressionLvl2(AOtherExpressionLvl2 node);
    void caseAIdentifierExpressionLvl1(AIdentifierExpressionLvl1 node);
    void caseAStringExpressionLvl1(AStringExpressionLvl1 node);
    void caseAIntegerExpressionLvl1(AIntegerExpressionLvl1 node);
    void caseATrueExpressionLvl1(ATrueExpressionLvl1 node);
    void caseAFalseExpressionLvl1(AFalseExpressionLvl1 node);
    void caseANullExpressionLvl1(ANullExpressionLvl1 node);
    void caseAMeExpressionLvl1(AMeExpressionLvl1 node);
    void caseANewExpressionLvl1(ANewExpressionLvl1 node);
    void caseACallExpressionLvl1(ACallExpressionLvl1 node);
    void caseAArrayExpressionLvl1(AArrayExpressionLvl1 node);
    void caseAParenExpressionLvl1(AParenExpressionLvl1 node);
    void caseAFloatExpressionLvl1(AFloatExpressionLvl1 node);
    void caseAExpressionDot(AExpressionDot node);
    void caseAArray(AArray node);

    void caseTNewline(TNewline node);
    void caseTComment(TComment node);
    void caseTWhitespace(TWhitespace node);
    void caseTContinuation(TContinuation node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTFloatLiteral(TFloatLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTUnterminatedString(TUnterminatedString node);
    void caseTIllegalString(TIllegalString node);
    void caseTBoolean(TBoolean node);
    void caseTBegin(TBegin node);
    void caseTClasskey(TClasskey node);
    void caseTElse(TElse node);
    void caseTEnd(TEnd node);
    void caseTFalse(TFalse node);
    void caseTFrom(TFrom node);
    void caseTIf(TIf node);
    void caseTInherits(TInherits node);
    void caseTInt(TInt node);
    void caseTIs(TIs node);
    void caseTLoop(TLoop node);
    void caseTMe(TMe node);
    void caseTNew(TNew node);
    void caseTNot(TNot node);
    void caseTNull(TNull node);
    void caseTString(TString node);
    void caseTThen(TThen node);
    void caseTTrue(TTrue node);
    void caseTWhile(TWhile node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTDuck(TDuck node);
    void caseTFloat(TFloat node);
    void caseTConcatenate(TConcatenate node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMultiply(TMultiply node);
    void caseTDivide(TDivide node);
    void caseTGreater(TGreater node);
    void caseTGreaterEqual(TGreaterEqual node);
    void caseTEquals(TEquals node);
    void caseTAssignment(TAssignment node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTComma(TComma node);
    void caseTSemicolon(TSemicolon node);
    void caseTColon(TColon node);
    void caseTDot(TDot node);
    void caseTIdentifier(TIdentifier node);
    void caseTUnknownCharacter(TUnknownCharacter node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
