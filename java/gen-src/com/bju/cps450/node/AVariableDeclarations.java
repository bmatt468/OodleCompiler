/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AVariableDeclarations extends PVariableDeclarations
{
    private TIdentifier _identifier_;
    private PTypeDeclaration _typeDeclaration_;
    private PInitializer _initializer_;
    private PNewlines _newlines_;

    public AVariableDeclarations()
    {
        // Constructor
    }

    public AVariableDeclarations(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PTypeDeclaration _typeDeclaration_,
        @SuppressWarnings("hiding") PInitializer _initializer_,
        @SuppressWarnings("hiding") PNewlines _newlines_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setTypeDeclaration(_typeDeclaration_);

        setInitializer(_initializer_);

        setNewlines(_newlines_);

    }

    @Override
    public Object clone()
    {
        return new AVariableDeclarations(
            cloneNode(this._identifier_),
            cloneNode(this._typeDeclaration_),
            cloneNode(this._initializer_),
            cloneNode(this._newlines_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableDeclarations(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PTypeDeclaration getTypeDeclaration()
    {
        return this._typeDeclaration_;
    }

    public void setTypeDeclaration(PTypeDeclaration node)
    {
        if(this._typeDeclaration_ != null)
        {
            this._typeDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeDeclaration_ = node;
    }

    public PInitializer getInitializer()
    {
        return this._initializer_;
    }

    public void setInitializer(PInitializer node)
    {
        if(this._initializer_ != null)
        {
            this._initializer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._initializer_ = node;
    }

    public PNewlines getNewlines()
    {
        return this._newlines_;
    }

    public void setNewlines(PNewlines node)
    {
        if(this._newlines_ != null)
        {
            this._newlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newlines_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._typeDeclaration_)
            + toString(this._initializer_)
            + toString(this._newlines_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._typeDeclaration_ == child)
        {
            this._typeDeclaration_ = null;
            return;
        }

        if(this._initializer_ == child)
        {
            this._initializer_ = null;
            return;
        }

        if(this._newlines_ == child)
        {
            this._newlines_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._typeDeclaration_ == oldChild)
        {
            setTypeDeclaration((PTypeDeclaration) newChild);
            return;
        }

        if(this._initializer_ == oldChild)
        {
            setInitializer((PInitializer) newChild);
            return;
        }

        if(this._newlines_ == oldChild)
        {
            setNewlines((PNewlines) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
