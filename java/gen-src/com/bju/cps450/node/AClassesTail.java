/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AClassesTail extends PClassesTail
{
    private PNewlines _newlines_;
    private PClassDefinition _classDefinition_;

    public AClassesTail()
    {
        // Constructor
    }

    public AClassesTail(
        @SuppressWarnings("hiding") PNewlines _newlines_,
        @SuppressWarnings("hiding") PClassDefinition _classDefinition_)
    {
        // Constructor
        setNewlines(_newlines_);

        setClassDefinition(_classDefinition_);

    }

    @Override
    public Object clone()
    {
        return new AClassesTail(
            cloneNode(this._newlines_),
            cloneNode(this._classDefinition_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassesTail(this);
    }

    public PNewlines getNewlines()
    {
        return this._newlines_;
    }

    public void setNewlines(PNewlines node)
    {
        if(this._newlines_ != null)
        {
            this._newlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newlines_ = node;
    }

    public PClassDefinition getClassDefinition()
    {
        return this._classDefinition_;
    }

    public void setClassDefinition(PClassDefinition node)
    {
        if(this._classDefinition_ != null)
        {
            this._classDefinition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classDefinition_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._newlines_)
            + toString(this._classDefinition_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._newlines_ == child)
        {
            this._newlines_ = null;
            return;
        }

        if(this._classDefinition_ == child)
        {
            this._classDefinition_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._newlines_ == oldChild)
        {
            setNewlines((PNewlines) newChild);
            return;
        }

        if(this._classDefinition_ == oldChild)
        {
            setClassDefinition((PClassDefinition) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
