/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AClassDefinition extends PClassDefinition
{
    private TClasskey _classkey_;
    private TIdentifier _beginId_;
    private PInheritsClause _inheritsClause_;
    private TIs _is_;
    private PNewlines _newlines_;
    private final LinkedList<PVariableDeclarations> _variableDeclarations_ = new LinkedList<PVariableDeclarations>();
    private final LinkedList<PMethodDeclarations> _methodDeclarations_ = new LinkedList<PMethodDeclarations>();
    private TEnd _end_;
    private TIdentifier _endId_;

    public AClassDefinition()
    {
        // Constructor
    }

    public AClassDefinition(
        @SuppressWarnings("hiding") TClasskey _classkey_,
        @SuppressWarnings("hiding") TIdentifier _beginId_,
        @SuppressWarnings("hiding") PInheritsClause _inheritsClause_,
        @SuppressWarnings("hiding") TIs _is_,
        @SuppressWarnings("hiding") PNewlines _newlines_,
        @SuppressWarnings("hiding") List<?> _variableDeclarations_,
        @SuppressWarnings("hiding") List<?> _methodDeclarations_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TIdentifier _endId_)
    {
        // Constructor
        setClasskey(_classkey_);

        setBeginId(_beginId_);

        setInheritsClause(_inheritsClause_);

        setIs(_is_);

        setNewlines(_newlines_);

        setVariableDeclarations(_variableDeclarations_);

        setMethodDeclarations(_methodDeclarations_);

        setEnd(_end_);

        setEndId(_endId_);

    }

    @Override
    public Object clone()
    {
        return new AClassDefinition(
            cloneNode(this._classkey_),
            cloneNode(this._beginId_),
            cloneNode(this._inheritsClause_),
            cloneNode(this._is_),
            cloneNode(this._newlines_),
            cloneList(this._variableDeclarations_),
            cloneList(this._methodDeclarations_),
            cloneNode(this._end_),
            cloneNode(this._endId_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClassDefinition(this);
    }

    public TClasskey getClasskey()
    {
        return this._classkey_;
    }

    public void setClasskey(TClasskey node)
    {
        if(this._classkey_ != null)
        {
            this._classkey_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classkey_ = node;
    }

    public TIdentifier getBeginId()
    {
        return this._beginId_;
    }

    public void setBeginId(TIdentifier node)
    {
        if(this._beginId_ != null)
        {
            this._beginId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beginId_ = node;
    }

    public PInheritsClause getInheritsClause()
    {
        return this._inheritsClause_;
    }

    public void setInheritsClause(PInheritsClause node)
    {
        if(this._inheritsClause_ != null)
        {
            this._inheritsClause_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inheritsClause_ = node;
    }

    public TIs getIs()
    {
        return this._is_;
    }

    public void setIs(TIs node)
    {
        if(this._is_ != null)
        {
            this._is_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._is_ = node;
    }

    public PNewlines getNewlines()
    {
        return this._newlines_;
    }

    public void setNewlines(PNewlines node)
    {
        if(this._newlines_ != null)
        {
            this._newlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newlines_ = node;
    }

    public LinkedList<PVariableDeclarations> getVariableDeclarations()
    {
        return this._variableDeclarations_;
    }

    public void setVariableDeclarations(List<?> list)
    {
        for(PVariableDeclarations e : this._variableDeclarations_)
        {
            e.parent(null);
        }
        this._variableDeclarations_.clear();

        for(Object obj_e : list)
        {
            PVariableDeclarations e = (PVariableDeclarations) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableDeclarations_.add(e);
        }
    }

    public LinkedList<PMethodDeclarations> getMethodDeclarations()
    {
        return this._methodDeclarations_;
    }

    public void setMethodDeclarations(List<?> list)
    {
        for(PMethodDeclarations e : this._methodDeclarations_)
        {
            e.parent(null);
        }
        this._methodDeclarations_.clear();

        for(Object obj_e : list)
        {
            PMethodDeclarations e = (PMethodDeclarations) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._methodDeclarations_.add(e);
        }
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TIdentifier getEndId()
    {
        return this._endId_;
    }

    public void setEndId(TIdentifier node)
    {
        if(this._endId_ != null)
        {
            this._endId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endId_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classkey_)
            + toString(this._beginId_)
            + toString(this._inheritsClause_)
            + toString(this._is_)
            + toString(this._newlines_)
            + toString(this._variableDeclarations_)
            + toString(this._methodDeclarations_)
            + toString(this._end_)
            + toString(this._endId_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classkey_ == child)
        {
            this._classkey_ = null;
            return;
        }

        if(this._beginId_ == child)
        {
            this._beginId_ = null;
            return;
        }

        if(this._inheritsClause_ == child)
        {
            this._inheritsClause_ = null;
            return;
        }

        if(this._is_ == child)
        {
            this._is_ = null;
            return;
        }

        if(this._newlines_ == child)
        {
            this._newlines_ = null;
            return;
        }

        if(this._variableDeclarations_.remove(child))
        {
            return;
        }

        if(this._methodDeclarations_.remove(child))
        {
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._endId_ == child)
        {
            this._endId_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classkey_ == oldChild)
        {
            setClasskey((TClasskey) newChild);
            return;
        }

        if(this._beginId_ == oldChild)
        {
            setBeginId((TIdentifier) newChild);
            return;
        }

        if(this._inheritsClause_ == oldChild)
        {
            setInheritsClause((PInheritsClause) newChild);
            return;
        }

        if(this._is_ == oldChild)
        {
            setIs((TIs) newChild);
            return;
        }

        if(this._newlines_ == oldChild)
        {
            setNewlines((PNewlines) newChild);
            return;
        }

        for(ListIterator<PVariableDeclarations> i = this._variableDeclarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariableDeclarations) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethodDeclarations> i = this._methodDeclarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethodDeclarations) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._endId_ == oldChild)
        {
            setEndId((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
