/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import java.util.*;
import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class AMethodDeclarations extends PMethodDeclarations
{
    private TIdentifier _beginId_;
    private TLParen _lParen_;
    private PArgumentList _argumentList_;
    private TRParen _rParen_;
    private PTypeDeclaration _typeDeclaration_;
    private TIs _is_;
    private PNewlines _beginNewlines_;
    private final LinkedList<PVariableDeclarations> _variableDeclarations_ = new LinkedList<PVariableDeclarations>();
    private TBegin _begin_;
    private PNewlines _middleNewlines_;
    private PStatementList _statementList_;
    private TEnd _end_;
    private TIdentifier _endId_;
    private PNewlines _endNewlines_;

    public AMethodDeclarations()
    {
        // Constructor
    }

    public AMethodDeclarations(
        @SuppressWarnings("hiding") TIdentifier _beginId_,
        @SuppressWarnings("hiding") TLParen _lParen_,
        @SuppressWarnings("hiding") PArgumentList _argumentList_,
        @SuppressWarnings("hiding") TRParen _rParen_,
        @SuppressWarnings("hiding") PTypeDeclaration _typeDeclaration_,
        @SuppressWarnings("hiding") TIs _is_,
        @SuppressWarnings("hiding") PNewlines _beginNewlines_,
        @SuppressWarnings("hiding") List<?> _variableDeclarations_,
        @SuppressWarnings("hiding") TBegin _begin_,
        @SuppressWarnings("hiding") PNewlines _middleNewlines_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TIdentifier _endId_,
        @SuppressWarnings("hiding") PNewlines _endNewlines_)
    {
        // Constructor
        setBeginId(_beginId_);

        setLParen(_lParen_);

        setArgumentList(_argumentList_);

        setRParen(_rParen_);

        setTypeDeclaration(_typeDeclaration_);

        setIs(_is_);

        setBeginNewlines(_beginNewlines_);

        setVariableDeclarations(_variableDeclarations_);

        setBegin(_begin_);

        setMiddleNewlines(_middleNewlines_);

        setStatementList(_statementList_);

        setEnd(_end_);

        setEndId(_endId_);

        setEndNewlines(_endNewlines_);

    }

    @Override
    public Object clone()
    {
        return new AMethodDeclarations(
            cloneNode(this._beginId_),
            cloneNode(this._lParen_),
            cloneNode(this._argumentList_),
            cloneNode(this._rParen_),
            cloneNode(this._typeDeclaration_),
            cloneNode(this._is_),
            cloneNode(this._beginNewlines_),
            cloneList(this._variableDeclarations_),
            cloneNode(this._begin_),
            cloneNode(this._middleNewlines_),
            cloneNode(this._statementList_),
            cloneNode(this._end_),
            cloneNode(this._endId_),
            cloneNode(this._endNewlines_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodDeclarations(this);
    }

    public TIdentifier getBeginId()
    {
        return this._beginId_;
    }

    public void setBeginId(TIdentifier node)
    {
        if(this._beginId_ != null)
        {
            this._beginId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beginId_ = node;
    }

    public TLParen getLParen()
    {
        return this._lParen_;
    }

    public void setLParen(TLParen node)
    {
        if(this._lParen_ != null)
        {
            this._lParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lParen_ = node;
    }

    public PArgumentList getArgumentList()
    {
        return this._argumentList_;
    }

    public void setArgumentList(PArgumentList node)
    {
        if(this._argumentList_ != null)
        {
            this._argumentList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._argumentList_ = node;
    }

    public TRParen getRParen()
    {
        return this._rParen_;
    }

    public void setRParen(TRParen node)
    {
        if(this._rParen_ != null)
        {
            this._rParen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rParen_ = node;
    }

    public PTypeDeclaration getTypeDeclaration()
    {
        return this._typeDeclaration_;
    }

    public void setTypeDeclaration(PTypeDeclaration node)
    {
        if(this._typeDeclaration_ != null)
        {
            this._typeDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._typeDeclaration_ = node;
    }

    public TIs getIs()
    {
        return this._is_;
    }

    public void setIs(TIs node)
    {
        if(this._is_ != null)
        {
            this._is_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._is_ = node;
    }

    public PNewlines getBeginNewlines()
    {
        return this._beginNewlines_;
    }

    public void setBeginNewlines(PNewlines node)
    {
        if(this._beginNewlines_ != null)
        {
            this._beginNewlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beginNewlines_ = node;
    }

    public LinkedList<PVariableDeclarations> getVariableDeclarations()
    {
        return this._variableDeclarations_;
    }

    public void setVariableDeclarations(List<?> list)
    {
        for(PVariableDeclarations e : this._variableDeclarations_)
        {
            e.parent(null);
        }
        this._variableDeclarations_.clear();

        for(Object obj_e : list)
        {
            PVariableDeclarations e = (PVariableDeclarations) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableDeclarations_.add(e);
        }
    }

    public TBegin getBegin()
    {
        return this._begin_;
    }

    public void setBegin(TBegin node)
    {
        if(this._begin_ != null)
        {
            this._begin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._begin_ = node;
    }

    public PNewlines getMiddleNewlines()
    {
        return this._middleNewlines_;
    }

    public void setMiddleNewlines(PNewlines node)
    {
        if(this._middleNewlines_ != null)
        {
            this._middleNewlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._middleNewlines_ = node;
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TIdentifier getEndId()
    {
        return this._endId_;
    }

    public void setEndId(TIdentifier node)
    {
        if(this._endId_ != null)
        {
            this._endId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endId_ = node;
    }

    public PNewlines getEndNewlines()
    {
        return this._endNewlines_;
    }

    public void setEndNewlines(PNewlines node)
    {
        if(this._endNewlines_ != null)
        {
            this._endNewlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endNewlines_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._beginId_)
            + toString(this._lParen_)
            + toString(this._argumentList_)
            + toString(this._rParen_)
            + toString(this._typeDeclaration_)
            + toString(this._is_)
            + toString(this._beginNewlines_)
            + toString(this._variableDeclarations_)
            + toString(this._begin_)
            + toString(this._middleNewlines_)
            + toString(this._statementList_)
            + toString(this._end_)
            + toString(this._endId_)
            + toString(this._endNewlines_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._beginId_ == child)
        {
            this._beginId_ = null;
            return;
        }

        if(this._lParen_ == child)
        {
            this._lParen_ = null;
            return;
        }

        if(this._argumentList_ == child)
        {
            this._argumentList_ = null;
            return;
        }

        if(this._rParen_ == child)
        {
            this._rParen_ = null;
            return;
        }

        if(this._typeDeclaration_ == child)
        {
            this._typeDeclaration_ = null;
            return;
        }

        if(this._is_ == child)
        {
            this._is_ = null;
            return;
        }

        if(this._beginNewlines_ == child)
        {
            this._beginNewlines_ = null;
            return;
        }

        if(this._variableDeclarations_.remove(child))
        {
            return;
        }

        if(this._begin_ == child)
        {
            this._begin_ = null;
            return;
        }

        if(this._middleNewlines_ == child)
        {
            this._middleNewlines_ = null;
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._endId_ == child)
        {
            this._endId_ = null;
            return;
        }

        if(this._endNewlines_ == child)
        {
            this._endNewlines_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._beginId_ == oldChild)
        {
            setBeginId((TIdentifier) newChild);
            return;
        }

        if(this._lParen_ == oldChild)
        {
            setLParen((TLParen) newChild);
            return;
        }

        if(this._argumentList_ == oldChild)
        {
            setArgumentList((PArgumentList) newChild);
            return;
        }

        if(this._rParen_ == oldChild)
        {
            setRParen((TRParen) newChild);
            return;
        }

        if(this._typeDeclaration_ == oldChild)
        {
            setTypeDeclaration((PTypeDeclaration) newChild);
            return;
        }

        if(this._is_ == oldChild)
        {
            setIs((TIs) newChild);
            return;
        }

        if(this._beginNewlines_ == oldChild)
        {
            setBeginNewlines((PNewlines) newChild);
            return;
        }

        for(ListIterator<PVariableDeclarations> i = this._variableDeclarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariableDeclarations) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._begin_ == oldChild)
        {
            setBegin((TBegin) newChild);
            return;
        }

        if(this._middleNewlines_ == oldChild)
        {
            setMiddleNewlines((PNewlines) newChild);
            return;
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._endId_ == oldChild)
        {
            setEndId((TIdentifier) newChild);
            return;
        }

        if(this._endNewlines_ == oldChild)
        {
            setEndNewlines((PNewlines) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
