/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.bju.cps450.node;

import com.bju.cps450.analysis.*;

@SuppressWarnings("nls")
public final class ALoopStatement extends PLoopStatement
{
    private TLoop _beginLoop_;
    private TWhile _while_;
    private PExpression _expression_;
    private PNewlines _newlines_;
    private PStatementList _statementList_;
    private TEnd _end_;
    private TLoop _endLoop_;

    public ALoopStatement()
    {
        // Constructor
    }

    public ALoopStatement(
        @SuppressWarnings("hiding") TLoop _beginLoop_,
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") PNewlines _newlines_,
        @SuppressWarnings("hiding") PStatementList _statementList_,
        @SuppressWarnings("hiding") TEnd _end_,
        @SuppressWarnings("hiding") TLoop _endLoop_)
    {
        // Constructor
        setBeginLoop(_beginLoop_);

        setWhile(_while_);

        setExpression(_expression_);

        setNewlines(_newlines_);

        setStatementList(_statementList_);

        setEnd(_end_);

        setEndLoop(_endLoop_);

    }

    @Override
    public Object clone()
    {
        return new ALoopStatement(
            cloneNode(this._beginLoop_),
            cloneNode(this._while_),
            cloneNode(this._expression_),
            cloneNode(this._newlines_),
            cloneNode(this._statementList_),
            cloneNode(this._end_),
            cloneNode(this._endLoop_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALoopStatement(this);
    }

    public TLoop getBeginLoop()
    {
        return this._beginLoop_;
    }

    public void setBeginLoop(TLoop node)
    {
        if(this._beginLoop_ != null)
        {
            this._beginLoop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._beginLoop_ = node;
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public PNewlines getNewlines()
    {
        return this._newlines_;
    }

    public void setNewlines(PNewlines node)
    {
        if(this._newlines_ != null)
        {
            this._newlines_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newlines_ = node;
    }

    public PStatementList getStatementList()
    {
        return this._statementList_;
    }

    public void setStatementList(PStatementList node)
    {
        if(this._statementList_ != null)
        {
            this._statementList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementList_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    public TLoop getEndLoop()
    {
        return this._endLoop_;
    }

    public void setEndLoop(TLoop node)
    {
        if(this._endLoop_ != null)
        {
            this._endLoop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._endLoop_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._beginLoop_)
            + toString(this._while_)
            + toString(this._expression_)
            + toString(this._newlines_)
            + toString(this._statementList_)
            + toString(this._end_)
            + toString(this._endLoop_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._beginLoop_ == child)
        {
            this._beginLoop_ = null;
            return;
        }

        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._newlines_ == child)
        {
            this._newlines_ = null;
            return;
        }

        if(this._statementList_ == child)
        {
            this._statementList_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        if(this._endLoop_ == child)
        {
            this._endLoop_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._beginLoop_ == oldChild)
        {
            setBeginLoop((TLoop) newChild);
            return;
        }

        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._newlines_ == oldChild)
        {
            setNewlines((PNewlines) newChild);
            return;
        }

        if(this._statementList_ == oldChild)
        {
            setStatementList((PStatementList) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        if(this._endLoop_ == oldChild)
        {
            setEndLoop((TLoop) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
